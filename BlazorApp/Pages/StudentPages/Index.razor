@page "/students"
@using BlazorApp.Models
@using BlazorApp.Services
@using Newtonsoft.Json

@inject ParentService ParentService;
@inject StudentService StudentService;
<h1>Student List</h1>


<div class="bg-white rounded mt-6 border border-bottom-0 position-relative ">

	<div class="d-flex justify-content-end gap-1 p-1 mt-4">
		<a class="btn btn-primary" href="/students/create" >Add Student</a>
		<button class="btn btn-primary">Save List</button>
	</div>

	<div class="d-flex justify-content-between mt-2 border p-1">
		<h6>Parent/Guardian List</h6>
		<div>
			<div class="input-group">
				<input type="search" name="search" placeholder="search" @bind="@searchTerm" @oninput="OnSearch" /><span class="bi bi-search input-group-text"></span>
			</div>
				@if (suggestions.Count > 0)
				{
					<div class="suggestion-list position-absolute">
						<ul class="list-group">
							@foreach (var suggestion in suggestions)
							{
								<li class="list-group-item" @onclick="() => SelectSuggestion(suggestion.FirstName +' ' +suggestion.LastName , suggestion.Id)">@suggestion.FirstName @suggestion.LastName</li>
							}
						</ul>
					</div>
				}

		</div>
	</div>

	<table class="table table-striped table-hover border p-1">
		<thead>
			<tr>
				<th class="text-primary">FirstName</th>
				<th class="text-primary">LastName</th>
				<th class="text-primary">Age</th>
				<th class="text-primary">Gender</th>
				<th>Action</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var student in students)
			{
				<tr>
					<td>@student.FirstName</td>
					<td>@student.LastName</td>
					<td>@student.Age</td>
					<td>@student.Gender</td>
					<td><a class="bi bi-layout-text-sidebar-reverse text-primary" href="/students/details/@student.Id"></a> <a class="bi bi-pencil text-primary" href="/students/edit/@student.Id"></a> <a class="bi bi-trash text-primary" href="/students/delete/@student.Id"></a></td>
					@* <td>@student.FirstName</td> *@

				</tr>
			}
		</tbody>
		<div class="d-flex gap-3 m-1">
			<button class=" bi bi-caret-left-fill border-0" @onclick="HandlePrevious" disabled="@PreviousBool"></button>
			<button class=" bi bi-caret-right-fill border-0" @onclick="HandleNext" disabled="@NextBool"></button>
		</div>
	</table>
</div>

@code {

	private List<StudentModel> students = new List<StudentModel>();
	private string searchTerm;
	private List<ParentModel> suggestions { get; set; } = new List<ParentModel>();
	private Guid? ParentId;
	private decimal page = 1;
	private decimal pageSize = 10;
	private decimal total;
	private bool NextBool;
	private bool PreviousBool;

	protected override async Task OnInitializedAsync()
	{
		await GetStudents();
	}

	private async void OnSearch(ChangeEventArgs e)
	{
		searchTerm = e.Value.ToString();
		if (!String.IsNullOrEmpty(searchTerm))
		{
			var response = await ParentService.SearchParentByName(searchTerm);
			suggestions = JsonConvert.DeserializeObject<List<ParentModel>>(response.data.ToString());
			StateHasChanged();

		}
		else
		{
			suggestions = [];
			ParentId = null;
			page = 1;
			await GetStudents();
			StateHasChanged();
		}
	}

	private async void SelectSuggestion(string suggestion, Guid parentId)
	{
		searchTerm = suggestion;
		ParentId = parentId;
		suggestions.Clear(); // Clear suggestions after selecting
		page = 1;
		await GetStudents();
		StateHasChanged();
	}

	private async void HandleNext()
	{
		if(page < total)
		{
			page += 1;
			await GetStudents();
			StateHasChanged();

		}
	}

	private async void HandlePrevious()
	{
		if(page > 1)
		{
			page -= 1;
			await GetStudents();
			StateHasChanged();

		}
	}

	private async Task GetStudents()
	{
		var response = await StudentService.GetAllStudents(ParentId, (int)page, (int)pageSize);
		page = response.page;
		pageSize = (decimal)response.pageSize;
		Console.WriteLine($"Total: {response.total} pageSize: {pageSize}");
		total = Math.Ceiling(response.total / pageSize);
		Console.WriteLine($"Total: {total}");
		if(page >= total)
		{
			NextBool = true;
		}
		else
		{
			NextBool = false;
		}

		if (page != 1)
		{
			PreviousBool = false;
		}
		else
		{
			PreviousBool = true;
		}
		students = JsonConvert.DeserializeObject<List<StudentModel>>(response.data.ToString());
	}

}
