@page "/students/create"
@using BlazorApp.Models
@using BlazorApp.Responses
@using BlazorApp.Services
@using Newtonsoft.Json

@inject NavigationManager NavigationManager
@inject StudentService StudentService;
@inject ParentService ParentService;

<h3>Create Student</h3>

<form class="">
	<h4 class="text-center">Add Student</h4>
		
	<div class="mb-3">
		<label for="inputForFirstName" class="form-label">First Name</label>
		<input type="text" class="form-control" id="inputForFirstName" @bind="student.FirstName">
		@if( errors.ContainsKey("FirstName")){
			foreach(var error in errors["FirstName"]){
				<p class="text-danger text-sm-start">@error</p>

			}

		}
	</div>

	<div class="mb-3">
		<label for="inputForLastName" class="form-label">Last Name</label>
		<input type="text" class="form-control" id="inputForLastName" @bind="student.LastName">
		@if (errors.ContainsKey("LastName"))
		{
			foreach (var error in errors["LastName"])
			{
				<p class="text-danger text-sm-start">@error</p>

			}

		}
	</div>

	<div class="mb-3">
		<label for="inputForAge" class="form-label">Age</label>
		<input type="number" class="form-control" id="inputForFirstName" @bind="student.Age">
		@if (errors.ContainsKey("Age"))
		{
			foreach (var error in errors["Age"])
			{
				<p class="text-danger text-sm-start">@error</p>

			}

		}
	</div>
	<div class="mb-3">
		<label for="selectForGender" class="form-label">Gender</label>
		<select id="selectForGender" class="form-select" @bind="student.Gender">
			<option></option>
			<option>Male</option>
			<option>Female</option>

		</select>
		@if (errors.ContainsKey("Gender"))
		{
			foreach (var error in errors["Gender"])
			{
				<p class="text-danger text-sm-start">@error</p>

			}

		}
	</div>

	<div class="mb-3 h-100">
		<label for="parentSearch" class="form-label">Search Parent/Guardian</label>
		<input type="text" id="parentSearch" class="form-control" @bind="searchTerm" @oninput="OnSearch" />
		@if (suggestions.Count > 0)
		{
			<div class="suggestion-list">
				<ul class="list-group">
					@foreach (var suggestion in suggestions)
					{
						<li class="list-group-item" @onclick="() => SelectSuggestion(suggestion.FirstName +' ' +suggestion.LastName , suggestion.Id)">@suggestion.FirstName @suggestion.LastName</li>
					}
				</ul>
			</div>
		}

		@if (errors.ContainsKey("Parent"))
		{
			foreach (var error in errors["Parent"])
			{
				<p class="text-danger text-sm-start">@error</p>

			}

		}
	</div>

	<button type="button" class="btn btn-primary" @onclick="onSubmit">Submit</button>
</form>

@code {
	private StudentModel student = new StudentModel();
	private string searchTerm { get; set; }
	private List<ParentModel> suggestions { get; set; } = new List<ParentModel>();
	private Dictionary<string,List<string>> errors = new Dictionary<string,List<string>>();


	private async void OnSearch(ChangeEventArgs e)
	{
		searchTerm = e.Value.ToString();
		if (!String.IsNullOrEmpty(searchTerm))
		{
			var response = await ParentService.SearchParentByName(searchTerm);
			suggestions = JsonConvert.DeserializeObject<List<ParentModel>>(response.data.ToString());
			StateHasChanged();

		}
		else
		{
			suggestions = [];
		}
	}

	private void SelectSuggestion(string suggestion, Guid parentId)
	{
		searchTerm = suggestion;
		student.ParentId = parentId;
		suggestions.Clear(); // Clear suggestions after selecting
	}

	private async void onSubmit()
	{
		errors.Clear();
		var response = await StudentService.CreateStudent(student);
		if (response.IsSuccessStatusCode)
		{
			NavigationManager.NavigateTo("/students");

		}
		else{
			var errrorResponse = JsonConvert.DeserializeObject<ErrorResponse>(await response.Content.ReadAsStringAsync());
			errors = errrorResponse.errors;
			if (student.ParentId == new Guid("00000000-0000-0000-0000-000000000000"))
			{
				errors["Parent"] = ["The parent field is required"];
			}
			StateHasChanged();
		}

	}

}
